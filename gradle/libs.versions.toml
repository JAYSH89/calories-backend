[versions]
dependencyManagement = "1.1.7"
exposed = "0.57.0"
kotlin = "2.1.0"
mockk = "1.13.13"
spring = "3.4.1"
springMockk = "4.0.2"

[libraries]
# Jetbrains
kotlin-reflect = { group = "org.jetbrains.kotlin", name = "kotlin-reflect" }

# Spring
spring-boot-starter-web = { group = "org.springframework.boot", name = "spring-boot-starter-web" }

# Serialization
jackson = { group = "com.fasterxml.jackson.module", name = "jackson-module-kotlin" }

# Storage
h2 = { group = "com.h2database", name = "h2" }
postgresql = { group = "org.postgresql", name = "postgresql" }
exposed-spring-boot-starter = { group = "org.jetbrains.exposed", name = "exposed-spring-boot-starter", version.ref = "exposed" }
exposed-java-time = { group = "org.jetbrains.exposed", name = "exposed-java-time", version.ref = "exposed" }
exposed-dao = { group = "org.jetbrains.exposed", name = "exposed-dao", version.ref = "exposed" }
exposed-migration = { group = "org.jetbrains.exposed", name = "exposed-migration", version.ref = "exposed" }
exposed-crypt = { group = "org.jetbrains.exposed", name = "exposed-crypt", version.ref = "exposed" }

# Test
spring-boot-starter-test = { group = "org.springframework.boot", name = "spring-boot-starter-test" }
kotlin-test-junit5 = { group = "org.jetbrains.kotlin", name = "kotlin-test-junit5" }
junit-platform-launcher = { group = "org.junit.platform", name = "junit-platform-launcher" }
mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }
spring-mockk = { group = "com.ninja-squad", name = "springmockk", version.ref = "springMockk" }

[bundles]
exposed = [
    "exposed-spring-boot-starter",
    "exposed-java-time",
    "exposed-dao",
    "exposed-migration",
    "exposed-crypt",
]
[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "dependencyManagement" }